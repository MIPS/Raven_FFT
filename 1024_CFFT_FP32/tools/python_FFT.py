import numpy as np

def complex_fft_single_precision(input_data):
    """
    Perform FFT on complex input data using single precision floats.
    
    Parameters:
    input_data (list): A list of interleaved real and imaginary parts of complex numbers.
    
    Returns:
    list: The FFT result with interleaved real and imaginary parts.
    """
    # Convert input list to a numpy array of complex numbers with single precision
    complex_data = np.array(input_data[::2], dtype=np.float32) + 1j * np.array(input_data[1::2], dtype=np.float32)
    
    # Perform FFT
    fft_result = np.fft.fft(complex_data, n=1024)
    
    # Interleave the real and imaginary parts of the FFT result and multiply by 100
    output_data = []
    for val in fft_result:
        output_data.append(val.real * 100)
        output_data.append(val.imag * 100)
    
    return output_data

# Given input data (128 values, interleaved real and imaginary parts)
numbers = []

data = [-0.865129623056441, 0.000000000000000, -2.655020678073846, 0.000000000000000, 0.600664612949661, 0.000000000000000,
        0.080378093886515, 0.000000000000000, -2.899160484012034, 0.000000000000000, 2.563004262857762, 0.000000000000000,
        3.078328403304206, 0.000000000000000, 0.105906778385130, 0.000000000000000, 0.048366940168201, 0.000000000000000,
        -0.145696461188734, 0.000000000000000, -0.023417155362879, 0.000000000000000, 2.127729174988954, 0.000000000000000,
        -1.176633086028377, 0.000000000000000, 3.690223557991855, 0.000000000000000, -0.622791766173194, 0.000000000000000,
        0.722837373872203, 0.000000000000000, 2.739754205367484, 0.000000000000000, -0.062610410524552, 0.000000000000000,
        -0.891296810967338, 0.000000000000000, -1.845872258871811, 0.000000000000000, 1.195039415434387, 0.000000000000000,
        -2.177388969045026, 0.000000000000000, 1.078649103637905, 0.000000000000000, 2.570976050490193, 0.000000000000000,
        -1.383551403404574, 0.000000000000000, 2.392141424058873, 0.000000000000000, 2.858002843205065, 0.000000000000000,
        -3.682433899725536, 0.000000000000000, -3.488146646451150, 0.000000000000000, 1.323468578888120, 0.000000000000000,
        -0.099771155430726, 0.000000000000000, 1.561168082500454, 0.000000000000000, 1.025026795103179, 0.000000000000000,
        0.928841900171200, 0.000000000000000, 2.930499509864950, 0.000000000000000, 2.013349089766430, 0.000000000000000,
        2.381676148486737, 0.000000000000000, -3.081062307950236, 0.000000000000000, -0.389579115537544, 0.000000000000000,
        0.181540149166620, 0.000000000000000, -2.601953341353208, 0.000000000000000, 0.333435137783218, 0.000000000000000,
        -2.812945856162965, 0.000000000000000, 2.649109640172910, 0.000000000000000, -1.003963025744654, 0.000000000000000,
        1.552460768755035, 0.000000000000000, 0.088641345335247, 0.000000000000000, -2.519951327113426, 0.000000000000000,
        -4.341348988610527, 0.000000000000000, 0.557772429359965, 0.000000000000000, -1.671267412948494, 0.000000000000000,
        0.733951350960387, 0.000000000000000, 0.409263788034864, 0.000000000000000, 3.566033071952806, 0.000000000000000,
        1.882565173848352, 0.000000000000000, -1.106017073793287, 0.000000000000000, 0.154456720778718, 0.000000000000000,
        -2.513205795512153, 0.000000000000000, 0.310978660939421, 0.000000000000000, 0.579706500111723, 0.000000000000000,
        0.000086383683251, 0.000000000000000, -1.311866980897721, 0.000000000000000, 1.840007477574986, 0.000000000000000,
        -3.253005768451345, 0.000000000000000]

# Open the file and read the numbers
with open('random_numbers.txt', 'r') as file:
    for line in file:
        # Convert each line to a float and append to the list
        numbers.append(float(line.strip()))

# Convert the list to a NumPy array of float32
numbers_array = np.array(numbers, dtype=np.float32)


# Calculate the FFT result
fft_result = complex_fft_single_precision(numbers_array)

# Print the FFT result as floating point values with each number multiplied by 100
#for value in fft_result:
#    print(f"{value:.6f}", end=" ")

for i, value in enumerate(fft_result):
    print(f"{value:.6f}", end=" ")
    if (i + 1) % 2 == 0:
        print()
